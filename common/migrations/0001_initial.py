# Generated by Django 2.0.9 on 2018-10-01 16:40

import common.blocks.collapsebox
import common.blocks.columns
import common.blocks.table
import common.blocks.tabs
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import taggit.managers
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.embeds.blocks
import wagtail.images.blocks
import wagtail.search.index


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('wagtailcore', '0040_page_draft_title'),
        ('taggit', '0002_auto_20150616_2121'),
        ('wagtailimages', '0021_image_file_hash'),
        ('wagtailredirects', '0006_redirect_increase_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('content', wagtail.core.fields.StreamField([('appeal', wagtail.core.blocks.StructBlock([('icon', wagtail.core.blocks.ChoiceBlock(choices=[('none', 'none'), ('flask', 'flask'), ('group', 'group'), ('laptop', 'laptop'), ('sitemap', 'sitemap'), ('user', 'user'), ('book', 'book'), ('download', 'download')])), ('topic', wagtail.core.blocks.CharBlock(max_length=35, required=True)), ('content', wagtail.core.blocks.RichTextBlock(required=True))], classname='appeal', icon='tick', template='common/blocks/appeal.html')), ('heading', wagtail.core.blocks.CharBlock(classname='full title')), ('statement', wagtail.core.blocks.CharBlock()), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('imagechooser', wagtail.images.blocks.ImageChooserBlock()), ('column', common.blocks.columns.RowBlock()), ('tabs', wagtail.core.blocks.StructBlock([('tab_list', common.blocks.tabs.TabListBlock()), ('tabs_style', wagtail.core.blocks.ChoiceBlock(choices=[('vertical', 'Vertical'), ('horizontal', 'Horizontal')]))])), ('image', wagtail.core.blocks.StructBlock([('main_image', wagtail.images.blocks.ImageChooserBlock()), ('style', wagtail.core.blocks.ChoiceBlock(choices=[('max-width:225px;max-height:145px', 'Small'), ('max-width:225px;max-height:145px;padding-top:20px', 'Small Pushed Down 20px'), ('max_width:250px;max-height:250px', 'Medium'), ('max_width:250px;max-height:250px;padding-top:20px', 'Medium Pushed Down 20px'), ('height:auto', 'Shrink to Fit')])), ('url', wagtail.core.blocks.CharBlock(max_length=250, required=False))])), ('customImage', wagtail.core.blocks.StructBlock([('css_style', wagtail.core.blocks.CharBlock(required=False)), ('main_image', wagtail.images.blocks.ImageChooserBlock()), ('url', wagtail.core.blocks.CharBlock(max_length=250, required=False))])), ('rich_text', wagtail.core.blocks.RichTextBlock()), ('raw_html', wagtail.core.blocks.RawHTMLBlock(help_text='With great power comes great responsibility. This HTML is unescaped. Be careful!')), ('people_block', wagtail.core.blocks.StructBlock([('css_style', wagtail.core.blocks.CharBlock(required=False)), ('displayStyle', wagtail.core.blocks.ChoiceBlock(choices=[('concise-team', 'concise-team'), ('concise-ambassador', 'concise-ambassador'), ('detailed', 'detailed')])), ('tag', wagtail.core.blocks.CharBlock(max_length=20))])), ('centered_text', wagtail.core.blocks.StructBlock([('css_style', wagtail.core.blocks.CharBlock(required=False)), ('text', wagtail.core.blocks.RichTextBlock())])), ('hero_block', wagtail.core.blocks.StructBlock([('css_style', wagtail.core.blocks.CharBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=True)), ('description', wagtail.core.blocks.RawHTMLBlock(required=True)), ('image_display_setting', wagtail.core.blocks.ChoiceBlock(choices=[('background', 'Cover the whole Hero as a background'), ('icon', 'Center the image in the middle of the hero block')])), ('text_color', wagtail.core.blocks.CharBlock(help_text='Enter a color for the text.'))])), ('spotlight_block', wagtail.core.blocks.StructBlock([('css_style', wagtail.core.blocks.CharBlock(required=False)), ('bubbles', wagtail.core.blocks.StreamBlock([('bubble_block', wagtail.core.blocks.StructBlock([('css_style', wagtail.core.blocks.CharBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock()), ('title', wagtail.core.blocks.CharBlock(max_length=35, required=True)), ('description', wagtail.core.blocks.RichTextBlock(required=True))]))]))])), ('job_whole_block', wagtail.core.blocks.StructBlock([('css_style', wagtail.core.blocks.CharBlock(required=False))])), ('embed_block', wagtail.embeds.blocks.EmbedBlock()), ('whitespaceblock', wagtail.core.blocks.StructBlock([('css_style', wagtail.core.blocks.CharBlock(required=False)), ('height', wagtail.core.blocks.IntegerBlock())])), ('clear_fixblock', wagtail.core.blocks.StructBlock([('css_style', wagtail.core.blocks.CharBlock(required=False))])), ('code_block', wagtail.core.blocks.StructBlock([('css_style', wagtail.core.blocks.CharBlock(required=False)), ('language', wagtail.core.blocks.ChoiceBlock(choices=[('python', 'python'), ('css', 'css'), ('sql', 'sql'), ('javascript', 'javascript'), ('clike', 'clike'), ('markup', 'markup'), ('java', 'java')])), ('codes', wagtail.core.blocks.TextBlock())])), ('table_block', common.blocks.table.CustomTableBlock()), ('calender_block', wagtail.core.blocks.StructBlock([('css_style', wagtail.core.blocks.CharBlock(required=False)), ('source', wagtail.core.blocks.CharBlock(help_text='Such as: calendar@cos.io. You can also change the style of calendar block.', max_length=255, required=True))])), ('journal_block', wagtail.core.blocks.StructBlock([('css_style', wagtail.core.blocks.CharBlock(required=False)), ('displayStyle', wagtail.core.blocks.ChoiceBlock(choices=[('participating journals', 'participating journals'), ('eligible journals', 'eligible journals'), ('journals signatory', 'journals signatory')]))])), ('render_file', wagtail.core.blocks.StructBlock([('css_style', wagtail.core.blocks.CharBlock(required=False)), ('file_link', wagtail.core.blocks.CharBlock(help_text='Full link to the file on the OSF', max_length=255, required=True))])), ('sponsor_partner_block', wagtail.core.blocks.StructBlock([('displayChoice', wagtail.core.blocks.ChoiceBlock(choices=[('sponsors', 'sponsors'), ('partners', 'partners')]))])), ('collapse_block', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('list', common.blocks.collapsebox.CollapseBoxListBlock())])), ('button', wagtail.core.blocks.StructBlock([('css_style', wagtail.core.blocks.CharBlock(required=False)), ('description', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('link', wagtail.core.blocks.CharBlock(max_length=255, required=True))]))], blank=True, null=True)),
                ('custom_url', models.CharField(blank=True, default='', max_length=256, null=True)),
                ('menu_order', models.IntegerField(blank=True, default=1, help_text='The order this page should appear in the menu. The lower the number, the more left the page will appear. This is required for all pages where "Show in menus" is checked.')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', wagtail.search.index.Indexed),
        ),
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('amount', models.IntegerField(blank=True, null=True)),
                ('thank_you_message', wagtail.core.fields.RichTextField(blank=True)),
            ],
            options={
                'ordering': ['date'],
            },
            bases=(models.Model, wagtail.search.index.Indexed),
        ),
        migrations.CreateModel(
            name='Footer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='untitled', max_length=255)),
                ('content', wagtail.core.fields.StreamField([('heading', wagtail.core.blocks.CharBlock(classname='full title')), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('image', wagtail.images.blocks.ImageChooserBlock()), ('columns', common.blocks.columns.RowBlock()), ('raw_html', wagtail.core.blocks.RawHTMLBlock(help_text='With great power comes great responsibility. This HTML is unescaped. Be careful!')), ('google_map', wagtail.core.blocks.StructBlock([('css_style', wagtail.core.blocks.CharBlock(required=False)), ('address', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('map_zoom_level', wagtail.core.blocks.CharBlock(default=14, max_length=3, required=True))])), ('twitter_feed', wagtail.core.blocks.StructBlock([('css_style', wagtail.core.blocks.CharBlock(required=False)), ('username', wagtail.core.blocks.CharBlock(required=True))])), ('photo_stream', wagtail.core.blocks.StructBlock([])), ('centered_text', wagtail.core.blocks.StructBlock([('css_style', wagtail.core.blocks.CharBlock(required=False)), ('text', wagtail.core.blocks.RichTextBlock())]))], blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Footer',
                'verbose_name_plural': 'Footers',
            },
        ),
        migrations.CreateModel(
            name='FormField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FormPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, verbose_name='to address')),
                ('from_address', models.CharField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('intro', wagtail.core.fields.RichTextField(blank=True)),
                ('thank_you_text', wagtail.core.fields.RichTextField(blank=True)),
                ('action', models.CharField(blank=True, help_text='Optional action for the form. This will default to the slug.', max_length=1000)),
                ('menu_order', models.IntegerField(blank=True, default=1, help_text='The order this page should appear in the menu. The lower the number, the more left the page will appear. This is required for all pages where "Show in menus" is checked.')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='InkindDonation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('thank_you_message', wagtail.core.fields.RichTextField(blank=True)),
            ],
            options={
                'ordering': ['date'],
            },
            bases=(models.Model, wagtail.search.index.Indexed),
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True)),
                ('background', wagtail.core.fields.RichTextField(blank=True)),
                ('responsibilities', wagtail.core.fields.RichTextField(blank=True)),
                ('skills', wagtail.core.fields.RichTextField(blank=True)),
                ('notes', wagtail.core.fields.RichTextField(blank=True)),
                ('location', wagtail.core.fields.RichTextField(blank=True)),
                ('benefits', wagtail.core.fields.RichTextField(blank=True)),
                ('applying', wagtail.core.fields.RichTextField(blank=True)),
                ('core_technologies', wagtail.core.fields.RichTextField(blank=True)),
                ('referrals', wagtail.core.fields.RichTextField(blank=True)),
                ('preferred', wagtail.core.fields.RichTextField(blank=True)),
                ('qualifications', wagtail.core.fields.RichTextField(blank=True)),
                ('experience_we_need', wagtail.core.fields.RichTextField(blank=True)),
            ],
            options={
                'ordering': ['title'],
            },
            bases=(models.Model, wagtail.search.index.Indexed),
        ),
        migrations.CreateModel(
            name='Journal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True)),
                ('url_link', models.URLField(blank=True)),
                ('is_registered_journal', models.BooleanField(default=False)),
                ('is_special_journal', models.BooleanField(default=False)),
                ('is_featured_journal', models.BooleanField(default=False)),
                ('is_preregistered_journal', models.BooleanField(default=False)),
                ('is_top_journal', models.BooleanField(default=False)),
                ('publisher', models.CharField(blank=True, max_length=255)),
                ('association', models.CharField(blank=True, max_length=255)),
                ('area', models.CharField(blank=True, max_length=255)),
                ('notes', wagtail.core.fields.StreamField([('note', wagtail.core.blocks.StructBlock([('description', wagtail.core.blocks.CharBlock(max_length=255, required=False)), ('link', wagtail.core.blocks.URLBlock(required=False))]))], blank=True)),
            ],
            options={
                'ordering': ['title'],
            },
            bases=(models.Model, wagtail.search.index.Indexed),
        ),
        migrations.CreateModel(
            name='NewsArticle',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('date', models.DateField(verbose_name='Post date')),
                ('intro', models.CharField(blank=True, max_length=1000)),
                ('body', wagtail.core.fields.RichTextField(blank=True, help_text='Fill this if the article is from COS')),
                ('external_link', models.CharField(blank=True, help_text='Fill this if the article is NOT from COS', max_length=255, verbose_name='External Article Link')),
                ('custom_url', models.CharField(default='', max_length=256)),
                ('footer', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='common.Footer')),
                ('main_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', wagtail.search.index.Indexed),
        ),
        migrations.CreateModel(
            name='NewsIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('statement', models.CharField(blank=True, max_length=1000)),
                ('menu_order', models.IntegerField(blank=True, default=1, help_text='The order this page should appear in the menu. The lower the number, the more left the page will appear. This is required for all pages where "Show in menus" is checked.')),
                ('footer', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='common.Footer')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('partner', models.BooleanField(default=False)),
                ('introduction', wagtail.core.fields.RichTextField(blank=True)),
                ('url', models.URLField(blank=True)),
                ('logo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(models.Model, wagtail.search.index.Indexed),
        ),
        migrations.CreateModel(
            name='PageAlias',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('menu_order', models.IntegerField(blank=True, default=1, help_text='The order this page should appear in the menu. The lower the number, the more left the page will appear. This is required for all pages where "Show in menus" is checked.')),
                ('alias_for_page', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='aliases', to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=255)),
                ('middle_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(max_length=255)),
                ('bio', wagtail.core.fields.RichTextField(blank=True)),
                ('position', models.CharField(blank=True, max_length=140)),
                ('term', models.CharField(blank=True, help_text='Format:YYYY-YYYY', max_length=9)),
                ('linked_in', models.URLField(blank=True)),
                ('blog_url', models.URLField(blank=True)),
                ('osf_profile', models.URLField(blank=True)),
                ('google_plus', models.URLField(blank=True)),
                ('github', models.URLField(blank=True)),
                ('twitter', models.URLField(blank=True)),
                ('phone_number', models.CharField(blank=True, help_text='Format:XXX-XXX-XXXX', max_length=12)),
                ('email_address', models.EmailField(blank=True, max_length=254)),
                ('favorite_food', models.CharField(blank=True, max_length=140)),
                ('photo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'verbose_name_plural': 'People',
                'ordering': ['last_name'],
            },
            bases=(models.Model, wagtail.search.index.Indexed),
        ),
        migrations.CreateModel(
            name='PersonTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_person', to='common.Person')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='common_persontag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VersionedRedirect',
            fields=[
                ('redirect_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailredirects.Redirect')),
                ('versioned_redirect_page', modelcluster.fields.ParentalKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='versioned_redirects', to='wagtailcore.Page', verbose_name='redirect to a page')),
            ],
            bases=('wagtailredirects.redirect',),
        ),
        migrations.AddField(
            model_name='person',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='common.PersonTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='person',
            name='user',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='inkinddonation',
            name='organization',
            field=modelcluster.fields.ParentalKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='inkind_donations', to='common.Organization', verbose_name='Organization'),
        ),
        migrations.AddField(
            model_name='formfield',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='common.FormPage'),
        ),
        migrations.AddField(
            model_name='donation',
            name='organization',
            field=modelcluster.fields.ParentalKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='donations', to='common.Organization', verbose_name='Organization'),
        ),
        migrations.AddField(
            model_name='custompage',
            name='footer',
            field=models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='common.Footer'),
        ),
    ]
